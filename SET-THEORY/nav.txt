GLOSSARY : 
1) ∪ == Union (or operator)
2) ∩ == Intersection (and operator)
3) Venn Diagram == Pictorial Representation of sets
4) Universal set == All possible values
5) SuperSet ==> A = {x | x ∈ A}
6) Subset ==> Part of SuperSet ==> B = {y | y ∈ B}
7) A - B == A ∩ (A ∩ B)' or {x ∈ A | y ∉ B}
  A = {p | p ∈ A} and B = {q | q ∈ (A ∩ B)'}
  A = {p | p ∈ A} and B = {q | q ∉ (A ∩ B)}
  Hence proved :):)!
8) Proper Subset ==> ⊆ -->> part of SuperSet and has equal # of set elements 
9) Strict Subset == ⊂ -->> part of SuperSet and doesn't equal # of set elements 

*KEY EXAMPLES OF SUBSET METHOD
Lemma 1.0 : A ⊆ B and B ⊆ C then A ⊆ C
Proof 1.0 : A = {x | x ∈ A} ; B = {y | y ∈ B} and C = {z | z ∈ C}
         TRANSITIVE RELATIONSHIP? Maybe!
Lemma 1.1 : P(A ∩ B) ⊆ P(A) ∩ P(B)
Proof 1.1 : A = {x | x ∈ A} ; B = {y | y ∈ B} ; A ∩ B = { x, y | x ∈ A and y ∈ B}
         P(A) = {∅, {x}, {y}, {x,y}}
         P(B) = {∅, {y}, {x}, {y,x}}
         s ∈ P(A) and t ∈ P(B)
         (s ∩ t) ∈ [P(A) ∩ P(B)]
         Hence proved on LHS!
         [P(A) ∩ P(B)] ==> Therefore LHS ⊆ RHS! THIS IS FLAKY :(

* Demorgan's Laws
Lemma 2.0 : (A ∩ B)^c ⊆ [A^c ∪ B^c]
Proof 2.0 :  A = {x | x ∈ A} ; B = {y | y ∈ B} ;  A ∩ B = { x, y | x ∈ A and y ∈ B}
           r = { p, q | p ∉ A and q ∉ B}
           r ∉ p ∩ q ==> r ∈ [p ∩ q]^c
           Proved on RHS! Now LHS
           r = { p | p ∉ [A and B]}
           p ∉ A and q ∉ B
           Proved! Phew, finally :)

Lemma 2.1 :  [A^c ∩ B^c] ⊆ (A ∪ B)^c
Proof 2.1 :  A = {x | x ∈ A} ; B = {y | y ∈ B} ;  A ∪ B = { x, y | x ∈ A or y ∈ B}
           r = { p, q | p ∉ A and q ∉ B}
           r ∉ p ∩ q ==> r ∈ [p ∩ q]^c
           Proved on LHS! Now RHS
           r = { p | p ∉ [A or B]}
           p ∉ A or q ∉ B
           Proved! Phew, finally :)
/***********************************************************************************************/
**SET THEORY 
POSET == Subset within subset! 
LET US DEFINE A = {1,2} and PowerSet(A) is shown below as a Tree diagram

                   |--> { }
          |--> { } | 
∅/{ } --> |        |--> {2}
          |
          |        |--> { }
          |--> {1} |
                   |--> {1,2}
**BOOLEAN LAWS
1) ASSOCIATIVE ==> (a ∪ b) ∪ c == a ∪ (b ∪ c) 
2) COMMUTATIVE ==> (a ∩ b) ∩ c == a ∩ (b ∩ c) 
2) DISTRIBUTIVE ==> (a ∩ b) ∪ c == (a ∪ c) ∩ (b ∪ c)
/**********************************************************************************************/
**RELATIONS
          |--> Reflexive ==> {a ∈ A | (a,a) ∈ R} (SELF-LOOPS)
TYPES ==> |--> Symmetric ==> {a ∈ A , b ∈ B | (a,b) ∈ R and (b,a) ∈ R } 
          |--> Transitive ==> {a ∈ A , b ∈ B and c ∈ C | (a,b) ∈ R and (b,c) ∈ R and (a,c) ∈ R}
                          ==> {a ∈ A , b ∈ B and c ∈ C | { (a,b), (b,c), (a,c) } ∈ R }
          |--> Anti-Symmetric ==> {a ∈ A , b ∈ B | (a,b) ∈ R and (b,a) ∉ R }
                                 ~p = (b,a) ∉ R and q = a ∈ A , b ∈ B
                                 ~p and q ==> p --> q is true
          |--> Asymmetric ==> {a ∈ A , b ∈ B | (a,b) ∈ R and (b,a) ∈ R and a == b} 
          |--> EQUIVALENCE ==> REFLEXIVE + SYMMETRIC + TRANSITIVE
          |--------------------------------------------------------------------------------------------
          |--> PARTIAL ORDER ==> REFLEXIVE + ANTI-SYMMETRIC + TRANSITIVE
                             ==> Poset(A,R) | A is a given set and R is a relation defined on set A
                             ==> HASSE diagram is used to show whether a given poset is totally ordered or linearly chained!
**HOW TO CONSTRUCT HASSE DIAGRAM?
1) REMOVE SELF-LOOPS and transitive relation ==> (a,c) ∈ R to reduce REDUNDANCY!
2) Direction of the arrow is upwards so you can remove the arrow head symbol

**TERMINOLOGY REGARDING HASSE DIAGRAM

Extreme endpoints | ---> Maximal/Upper ==> a, b ... n nodes are related by lower levels (NO successor)
                  | ---> Minimal/Lower ==> a, b ... n nodes are related by upper levels (NO predecessor)
                  | ---> Greatest element == > a1, a2 ... a_{n} ∈ A | a_{n} > a_{n-1} ... > a1
                  | ---> Least element  == > a1, a2 ... a_{n} ∈ A | a1 < a2 ... a_{n}
                  | ---> Greatest lower bound ==> GLB = {a1, a2 ... a_{n} ∈ A | a1 < a2 ... a_{n} }
                                              ==> a_{n} is GLB
                  | ---> Least upper bound ==> LUB = {a1, a2 ... a_{n} ∈ A | a_{n} > a_{n-1} ... > a1}
                                              ==> a1 is LUB


/**********************************************************************************************/
**FUNCTIONs ==> SPECIAL CASE OF RELATION

|-------|       |----------|       |--------|
| INPUT | --->> | FUNCTION | --->> | OUTPUT |
|-------|       |----------|       |--------|

          | --> INJECTIVE / ONE-to-ONE FUNCTION ==> MAPPING ONE I/P to ONE O/P 
TYPES ==> | --> SURJECTIVE / ONTO FUNCTION ==> MAPPING ONE I/P TO MANNY O/P's
          | --> BIJECTIVE == INJECTIVE + SURJECTIVE

IF YOU CAN SHOW THAT GIVEN FUNCTION IS A BIJECTIVE THEN YOU CAN FIND ITS INVERSE! 
/**********************************************************************************************/
THE END ;) ;)
