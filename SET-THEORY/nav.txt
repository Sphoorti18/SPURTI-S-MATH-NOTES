GLOSSARY : 
∪ == Union (or operator)
∩ == Intersection (and operator)
Venn Diagram == Pictorial Representation of sets
Universal set == All possible values
/***********************************************************************************************/
**SET THEORY 
POSET == Subset within subset! 
LET US DEFINE A = {1,2}

                   |--> { }
          |--> { } | 
∅/{ } --> |        |--> {2}
          |
          |        |--> { }
          |--> {1} |
                   |--> {1,2}
**BOOLEAN LAWS
1) ASSOCIATIVE ==> (a ∪ b) ∪ c == a ∪ (b ∪ c) 
2) COMMUTATIVE ==> (a ∩ b) ∩ c == a ∩ (b ∩ c) 
2) DISTRIBUTIVE ==> (a ∩ b) ∪ c == (a ∪ c) ∩ (b ∪ c)
/**********************************************************************************************/
**RELATIONS
          |--> Reflexive ==> {a ∈ A | (a,a) ∈ R} (SELF-LOOPS)
TYPES ==> |--> Symmetric ==> {a ∈ A , b ∈ B | (a,b) ∈ R and (b,a) ∈ R } 
          |--> Transitive ==> {a ∈ A , b ∈ B and c ∈ C | (a,b) ∈ R and (b,c) ∈ R and (a,c) ∈ R}
                          ==> {a ∈ A , b ∈ B and c ∈ C | { (a,b), (b,c), (a,c) } ∈ R }
          |--> Anti-Symmetric ==> {a ∈ A , b ∈ B | (a,b) ∈ R and (b,a) ∉ R }
          |--> Asymmetric ==> {a ∈ A , b ∈ B | (a,b) ∈ R and (b,a) ∈ R and a == b} 
          |--> EQUIVALENCE ==> REFLEXIVE + SYMMETRIC + TRANSITIVE
          |--------------------------------------------------------------------------------------------
          |--> PARTIAL ORDER ==> REFLEXIVE + ANTI-SYMMETRIC + TRANSITIVE
                             ==> Poset(A,R) | A is a given set and R is a relation defined on set A
                             ==> HASSE diagram is used to show whether a given poset is totally ordered or linearly chained!
**HOW TO CONSTRUCT HASSE DIAGRAM?
1) REMOVE SELF-LOOPS and transitive relation ==> (a,c) ∈ R to reduce REDUNDANCY!
2) Direction of the arrow is upwards so you can remove the arrow head symbol

**TERMINOLOGY REGARDING HASSE DIAGRAM

Extreme endpoints | ---> Maximal/Upper ==> a, b ... n nodes are related by lower levels (NO successor)
                  | ---> Minimal/Lower ==> a, b ... n nodes are related by upper levels (NO predecessor)
                  | ---> Greatest element == > a1, a2 ... a_{n} ∈ A | a_{n} > a_{n-1} ... > a1
                  | ---> Least element  == > a1, a2 ... a_{n} ∈ A | a1 < a2 ... a_{n}
                  | ---> Greatest lower bound 
                  | ---> Least upper bound


/**********************************************************************************************/
**FUNCTIONs ==> SPECIAL CASE OF RELATION

|-------|       |----------|       |--------|
| INPUT | --->> | FUNCTION | --->> | OUTPUT |
|-------|       |----------|       |--------|

          | --> INJECTIVE / ONE-to-ONE FUNCTION ==> MAPPING ONE I/P to ONE O/P 
TYPES ==> | --> SURJECTIVE / ONTO FUNCTION ==> MAPPING ONE I/P TO MANNY O/P's
          | --> BIJECTIVE == INJECTIVE + SURJECTIVE

IF YOU CAN SHOW THAT GIVEN FUNCTION IS A BIJECTIVE THEN YOU CAN FIND ITS INVERSE! 
/**********************************************************************************************/
THE END ;) ;)
