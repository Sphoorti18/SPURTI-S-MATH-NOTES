GRAPH THEORY (CONFUSION is the only shortcut that you can find)

/***********************************************************************/
Terminology :
Multiple edges : u and v do have 2 or more edges
Self loops : u and u have an edge.
Simple graph = No multiple edges and no self loops.
/***********************************************************************/
GRAPH |---> Directed (Digraph)
      |---> Undirected (Un-digraph)

**Digraph
Degree of node = Perspective of node |----> Outgoing edges (source) 
                                     |----> Incoming edges (sink)

REPRESENTATION |---> INCIDENT MATRIX ==> rows are nodes and columns are edges
                                         m = n1, n2, ... + INFINITY
                                         n = e1, e2, ... + INFINITY
               |---> ADJACENCY MATRIX/LIST ==> rows and columns are nodes
               |---> PLANAR (TOP VIEW)
//-----------------------------------------------------------------------

ISOMORPHISM = Graphs(Edges, Nodes); 
{G(E,N) : 0 <= E == N ~= (+ INFINITY)} BUT DIFFER in positioning of 
Edges/STRUCTURE

//-----------------------------------------------------------------------

Euler's Theorem
Connected graph G is Eulerian iff it has no odd degree ∀ nodes in G.
No self loops are allowed ==> A node != B node and they have odd degree
(sink or source)

Euler's Circuit
In G, we start at any random Vertex V and end at same Vertex V.
We split the G into several pieces and conquer them along the way.

//-----------------------------------------------------------------------

HAMILTONIAN CYCLE |----> DIRAC's ==> G = {G'(V,E) | 0 <= V,E <= + INFINITY}
                                     G = {G'(V,E) | n >= 3 and degree >= n/2}
                  |----> ORE's ==> G = {G'(V,E) | n >= 3 and deg(u) + deg(v) >= 
                                        n/2}
                                        {G'(V,E) | n >= 3 and 2(deg(u) + deg(v) 
                                        >= n)}

It's a proper path when it visits the nodes once along the way. 
You can start by choosing any Vertex V and end at same Vertex V.

THERE ARE 2 graphs G and H
AND TRY TO COMPARE THEM WITH EACH OTHER and CONQUER THEM.

//----------------------------------------------------------------------
SHORTEST-PATH |----> SINGLE-SOURCE (Dijkstra's Algo) ==> V_src to V_dest
              |----> SINGLE-PAIRS ==> V_src to V_sink
              |----> ALL-PAIRS ==> ∀ V_src to V_sink (DP)
OPTIMAL SUBSTRUCTURE
SUB-PATHs within G are shorcuts just like copy and paste to make it faster!

/***********************************************************************/
THE END ;) ;)
